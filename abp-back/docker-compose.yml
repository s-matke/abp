version: '3.8'

services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: ${USER_DB_PASS}
      USER_DB_NAME: ${USER_DB_NAME}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - user_db
    networks:
      - network
  
  accommodation_service:
    image: accommodation_service
    container_name: accommodation_service
    build:
      context: .
      dockerfile: ./accommodation_service/Dockerfile
    restart: on-failure
    environment:
      ACCOMMODATION_DB_HOST: ${ACCOMMODATION_DB_HOST}
      ACCOMMODATION_DB_PORT: ${ACCOMMODATION_DB_PORT}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      AVAILABILITY_SERVICE_HOST: ${AVAILABILITY_SERVICE_HOST}
      AVAILABILITY_SERVICE_PORT: ${AVAILABILITY_SERVICE_PORT}
      PRICING_SERVICE_HOST: ${PRICING_SERVICE_HOST}
      PRICING_SERVICE_PORT: ${PRICING_SERVICE_PORT}
    depends_on:
      - accommodation_db
    networks:
      - network
  
  pricing_service:
    image: pricing_service
    container_name: pricing_service
    build:
      context: .
      dockerfile: ./pricing_service/Dockerfile
    restart: on-failure
    environment:
      PRICING_DB_HOST: ${PRICING_DB_HOST}
      PRICING_DB_PORT: ${PRICING_DB_PORT}
      PRICING_SERVICE_PORT: ${PRICING_SERVICE_PORT}
    depends_on:
      - pricing_db
    networks:
      - network
  
  availability_service:
    image: availability_service
    container_name: availability_service
    build:
      context: .
      dockerfile: ./availability_service/Dockerfile
    restart: on-failure
    environment:
      AVAILABILITY_DB_HOST: ${AVAILABILITY_DB_HOST}
      AVAILABILITY_DB_PORT: ${AVAILABILITY_DB_PORT}
      AVAILABILITY_SERVICE_PORT: ${AVAILABILITY_SERVICE_PORT}
    depends_on:
      - availability_db
    networks:
      - network
  
  reservation_service:
    image: reservation_service
    container_name: reservation_service
    build:
      context: .
      dockerfile: ./reservation_service/Dockerfile
    restart: on-failure
    environment:
      RESERVATION_DB_HOST: ${RESERVATION_DB_HOST}
      RESERVATION_DB_PORT: ${RESERVATION_DB_PORT}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
    depends_on:
      - reservation_db
    networks:
      - network

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      ACCOMMODATION_SERVICE_HOST: ${ACCOMMODATION_SERVICE_HOST}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
      PRICING_SERVICE_HOST: ${PRICING_SERVICE_HOST}
      PRICING_SERVICE_PORT: ${PRICING_SERVICE_PORT}
      AUTH_SERVICE_HOST: ${AUTH_SERVICE_HOST}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT}
      AVAILABILITY_SERVICE_HOST: ${AVAILABILITY_SERVICE_HOST}
      AVAILABILITY_SERVICE_PORT: ${AVAILABILITY_SERVICE_PORT}
      RESERVATION_SERVICE_HOST: ${RESERVATION_SERVICE_HOST}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}

    networks:
      - network
  
  user_db:
    image: postgres
    container_name: user_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASS}
      POSTGRES_DB: ${USER_DB_NAME}
    ports:
      - 5433:${USER_DB_PORT}
    networks:
      - network
  
  accommodation_db:
    image: mongo
    container_name: accommodation_db
    restart: on-failure
    ports:
      - 27018:${ACCOMMODATION_DB_PORT}
    networks:
      - network
  
  pricing_db:
    image: mongo
    container_name: pricing_db
    restart: on-failure
    ports:
      - 27019:${PRICING_DB_PORT}
    networks:
      - network
  
  availability_db:
    image: mongo
    container_name: availability_db
    restart: on-failure
    ports:
      - 27020:${AVAILABILITY_DB_PORT}
    networks:
      - network
  
  reservation_db:
    image: mongo
    container_name: reservation_db
    restart: on-failure
    ports:
      - 27021:${RESERVATION_DB_PORT}
    networks:
      - network

networks:
  network:
    driver: bridge