version: '3.8'

services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: on-failure
    environment:
      USER_DB_HOST: ${USER_DB_HOST}
      USER_DB_PORT: ${USER_DB_PORT}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: ${USER_DB_PASS}
      USER_DB_NAME: ${USER_DB_NAME}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    depends_on:
      - user_db
    networks:
      - network
  
  accommodation_service:
    image: accommodation_service
    container_name: accommodation_service
    build:
      context: .
      dockerfile: ./accommodation_service/Dockerfile
    restart: on-failure
    environment:
      - ACCOMMODATION_DB_HOST: ${ACCOMMODATION_DB_HOST}
      - ACCOMMODATION_DB_PORT: ${ACCOMMODATION_DB_PORT}
      - ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
    depends_on:
      - accommodation_db
    networks:
      - network
  
  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: ${USER_SERVICE_HOST}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
    networks:
      - network
  
  user_db:
    image: postgres
    container_name: user_db
    restart: on-failure
    environment:
      POSTGRES_USER: ${USER_DB_USER}
      POSTGRES_PASSWORD: ${USER_DB_PASS}
      POSTGRES_DB: ${USER_DB_NAME}
    ports:
      - 5433:${USER_DB_PORT}
    networks:
      - network
  
  accommodation_db:
    image: mongo
    container_name: accommodation_db
    restart: on_failure
    networks:
      - network
  
networks:
  network:
    driver: bridge